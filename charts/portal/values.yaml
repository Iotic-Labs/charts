# Default values for portal.
imagePullSecrets: []
# nameOverride: ""
# fullnameOverride: ""
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name:
ingress:
  enabled: false
  annotations: {}
  # kubernetes.io/ingress.class: nginx
  # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths: []
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local
frontProxy:
  resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi
  nodeSelector: {}
  tolerations: []
  affinity: {}
  replicaCount: 1
  image:
    repository: nginx
    pullPolicy: IfNotPresent
    tag: 1.19-alpine
  nameOverride: ""
  fullnameOverride: ""
  podSecurityContext: {}
  securityContext: {}
  service:
    type: ClusterIP
    port: 80
did:
  existingSecret:
  agentDID:
  agentKeyName:
  agentSecret:
  resolverUrl: https://did.stg.iotics.com
  tokenDuration: 600
  userDID:
portalServer:
  dbvar: db2
  resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi
  nodeSelector: {}
  tolerations: []
  affinity: {}
  replicaCount: 1
  adminEmail: "admin@admin.com"
  adminPassword: "adminadmin"
  image:
    repository: quay.io/iotic_labs/iotic-portal-server
    pullPolicy: IfNotPresent
    tag: 3.1.772
  nameOverride: ""
  fullnameOverride: ""
  podSecurityContext: {}
  securityContext: {}
  service:
    type: ClusterIP
    port: 80
  flask:
    config: "production"
    env: "production"
    app: "server:main()"
  mail:
    # existingSecret (name of a secret to Use)  or if blank, a secret is created with the values here used.
    # a secret should have the following items
    # username
    # password
    existingSecret:
    server: email-smtp.eu-west-1.amazonaws.com
    port: 587
    useTLS: true
    useSSL: false
    username: <setme>
    password: <setme>
    defaultSender: <setme>
  auth:
    # existingSecret (name of a secret to Use)  or if blank, a secret is created with the values here used.
    # a secret should have the following items
    # githubID
    # githubSecret
    # googleID
    # googleSecret
    existingSecret:
    github:
      id: gh-id
      secret: gh-secret
    google:
      id: google-id
      secret: google-secret
  keys:
    # existingSecret (name of a secret to Use)  or if blank, a secret is created using random values
    # or the values specified here if not blank, if providing a secret you need the following values:
    # jwt
    # secret
    # passwordSalt
    existingSecret:
    jwt:
    secret:
    passwordSalt:
  security:
    send:
      registerEmail: false
      passwordResetEmail: false
      passwordResetNoticeEmail: false
  # webConcurrency num cores * 4
  webConcurrency: 4
portalClient:
  resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi
  nodeSelector: {}
  tolerations: []
  affinity: {}
  replicaCount: 1
  image:
    repository: quay.io/iotic_labs/iotic-portal-client
    pullPolicy: IfNotPresent
    tag: 3.1.772
  nameOverride: ""
  fullnameOverride: ""
  podSecurityContext: {}
  securityContext: {}
  service:
    type: ClusterIP
    port: 80
dashboardServer:
  dbvar: db2
  resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi
  nodeSelector: {}
  tolerations: []
  affinity: {}
  replicaCount: 1
  image:
    repository: quay.io/iotic_labs/iotic-dashboard-server
    pullPolicy: IfNotPresent
    tag: 3.1.772
  nameOverride: ""
  fullnameOverride: ""
  podSecurityContext: {}
  securityContext: {}
  service:
    type: ClusterIP
    port: 8000
  # Use an existing k8s secret for the dashboard server , leave blank to auto generate
  # if you use own secret must pass value via "djangoSecret" k/v pair
  existingSecret:
  djangoSettingsModule: "dashboard.settings_prod"
  # webConcurrency num cores * 4
  webConcurrency: 2
  hostAddress: "node01.dev.space.iotics.com"
  hostAddressPort: 8021
dashboardClient:
  resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi
  nodeSelector: {}
  tolerations: []
  affinity: {}
  replicaCount: 1
  image:
    repository: quay.io/iotic_labs/iotic-dashboard-client
    pullPolicy: IfNotPresent
    tag: 3.1.772
  nameOverride: ""
  fullnameOverride: ""
  podSecurityContext: {}
  securityContext: {}
  service:
    type: ClusterIP
    port: 80
postgresql:
  enabled: true
  cpu: 300m
  memory: 256Mi
  persistence:
    size: 1Gi
  extraEnv:
    - name: POSTGRES_MULTIPLE_DATABASES
      value: portal,dashboard
  initdbScripts:
    multipledb.sh: |
      # !/bin/bash
      set -e
      set -u

      export PGPASSWORD=$POSTGRES_PASSWORD
      function create_database() {
        local database=$1
        echo "Creating database '$database'"
        psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" <<-EOSQL
            CREATE DATABASE $database;
      EOSQL
      }
      if [ -n "$POSTGRES_MULTIPLE_DATABASES" ]; then
        echo "Multiple database creation requested: $POSTGRES_MULTIPLE_DATABASES"
        for db in $(echo $POSTGRES_MULTIPLE_DATABASES | tr ',' ' '); do
          create_database $db
        done
        echo "Multiple databases created"
      fi
global:
  postgresql:
    postgresqlDatabase: db2
    postgresqlPassword: fooaabbccddee
